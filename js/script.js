// –¶–µ–π –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ –≤—Å—è HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞.
document.addEventListener('DOMContentLoaded', () => {
    // –û—Ç—Ä–∏–º—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç canvas —ñ –π–æ–≥–æ 2D-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è.
    const canvas = document.getElementById('tradingChart');
    const ctx = canvas.getContext('2d');

    // üîß –ó–∞–º—ñ–Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ –Ω–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ
    let width, height, Dpr;
    function resizeCanvas() {
        const cssWidth = canvas.clientWidth;
        const cssHeight = canvas.clientHeight;
        Dpr = window.devicePixelRatio || 1;
        canvas.width = Math.max(1, Math.floor(cssWidth * Dpr));
        canvas.height = Math.max(1, Math.floor(cssHeight * Dpr));
        ctx.setTransform(1, 0, 0, 1, 0, 0); // —Å–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        ctx.scale(Dpr, Dpr);                // –º–∞—Å—à—Ç–∞–±—É—î–º–æ –ø—ñ–¥ DPR
        width = cssWidth;                   // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ CSS-—Ä–æ–∑–º—ñ—Ä–∏
        height = cssHeight;
    }
    window.addEventListener('resize', () => {
        resizeCanvas();
        drawChart(); // –ø–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É
    });

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ DOM-–µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ.
    const currentRTPElement = document.getElementById('currentRTP');
    const averageRTPElement = document.getElementById('averageRTP');
    const volatilityElement = document.getElementById('volatility');

    // –ï–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    const modalCurrentRTPElement = document.getElementById('modal_currentRTP');
    const modalAverageRTPElement = document.getElementById('modal_averageRTP');
    const modalVolatilityElement = document.getElementById('modal_volatility');
    const lastBigWinElement = document.getElementById('lastBigWin');
    const booksFrequencyElement = document.getElementById('booksFrequency');
    const longestStreakElement = document.getElementById('longestStreak');
    const bonusProbabilityElement = document.getElementById('bonusProbability');
    const activePlayersElement = document.getElementById('activePlayers');
    const lastJackpotTimeElement = document.getElementById('lastJackpotTime');

    const moreInfoBtn = document.querySelector('.more_info');
    const modal = document.getElementById('moreInfoModal');
    const closeBtn = document.querySelector('.close-button');

    moreInfoBtn.addEventListener('click', () => {
        modal.classList.remove('hidden');
        updateModalData();
    });

    closeBtn.addEventListener('click', () => {
        modal.classList.add('hidden');
    });

    window.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.classList.add('hidden');
        }
    });

    // –°–∏–º—É–ª—è—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞. –¶–µ –º–∞—Å–∏–≤ "—Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤".
    const scenario = [
        // 1. –ß–µ—Ä–≤–æ–Ω–∞ –∑–æ–Ω–∞
        { type: 'normal', color: '#ff6666', duration: 5 * 60 + 3 * 60, minRTP: 10, maxRTP: 45 },
        // 2. –ß–µ—Ä–≤–æ–Ω–∞ –∑–æ–Ω–∞
        { type: 'normal', color: '#ff6666', duration: 1 * 60 + 2 * 60, minRTP: 10, maxRTP: 45 },
        // 3. –ó–µ–ª–µ–Ω–∞ –∑–æ–Ω–∞
        { type: 'normal', color: '#00c107', duration: 8 * 60 + 30 + 30 * 60, minRTP: 75, maxRTP: 95 },
        // 4. –ß–µ—Ä–≤–æ–Ω–∞ –∑–æ–Ω–∞
        { type: 'normal', color: '#ff6666', duration: 2 * 60 + 15 + 40, minRTP: 10, maxRTP: 45 },
        // 5. –ó–µ–ª–µ–Ω–∞ –∑–æ–Ω–∞
        { type: 'normal', color: '#00c107', duration: 4 * 60 + 15 * 60, minRTP: 75, maxRTP: 95 },
        // 6. –ó–µ–ª–µ–Ω–∞ –∑–æ–Ω–∞
        { type: 'normal', color: '#00c107', duration: 6 * 60, minRTP: 75, maxRTP: 95 },
        // 7. –ß–µ—Ä–≤–æ–Ω–∞ –∑–æ–Ω–∞
        { type: 'normal', color: '#ff6666', duration: 6 * 60 + 30, minRTP: 10, maxRTP: 45 },
        // 8. –ó–µ–ª–µ–Ω–∞ –∑–æ–Ω–∞
        { type: 'normal', color: '#00c107', duration: 6 * 60 + 6 * 60, minRTP: 75, maxRTP: 95 }
    ];

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —Å–∏–º—É–ª—è—Ü—ñ—ó –≤ localStorage, —â–æ–± –≤—ñ–Ω –∑–±–µ—Ä—ñ–≥–∞–≤—Å—è –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
    let state = JSON.parse(localStorage.getItem('analyzerState')) || {
        prices: [], // –ú–∞—Å–∏–≤ —Ç–æ—á–æ–∫ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞
        maxPoints: 50, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫ –Ω–∞ –≥—Ä–∞—Ñ—ñ–∫—É
        yMin: 0,
        yMax: 100,
        scenarioIndex: 0, // –ü–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Å—Ü–µ–Ω–∞—Ä—ñ—é
        phaseStartTime: Date.now(), // –ß–∞—Å –ø–æ—á–∞—Ç–∫—É –ø–æ—Ç–æ—á–Ω–æ—ó —Ñ–∞–∑–∏
        longestStreakValue: 9, 
        bonusProbabilityValue: 5.0,
        lastBigWinTime: '--',
        booksFrequencyValue: '--',
        activePlayersValue: 0,
        lastJackpotTime: formatCurrency(Math.floor(Math.random() * (200000 - 50000 + 1)) + 50000),
        lastJackpotUpdate: Date.now() // –î–æ–¥–∞–Ω–æ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∂–µ–∫–ø–æ—Ç—É
    };

    // –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ (–º–∞—Å–∏–≤ —Ü—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π), —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –π–æ–≥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ—é —Ü—ñ–Ω–æ—é.
    if (state.prices.length === 0) {
        const currentPhase = scenario[state.scenarioIndex];
        const initialRTP = (currentPhase.minRTP + currentPhase.maxRTP) / 2;
        state.prices.push(initialRTP);
    }

    // –ü—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ç–∞–Ω—É ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ canvas
    resizeCanvas();

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—é.
    function transitionToNextPhase() {
        state.scenarioIndex = (state.scenarioIndex + 1) % scenario.length;
        state.phaseStartTime = Date.now();
        localStorage.setItem('analyzerState', JSON.stringify(state));
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞.
    function drawChart() {
        // –û—á–∏—â–∞—î–º–æ –≤–µ—Å—å canvas –ø–µ—Ä–µ–¥ –º–∞–ª—é–≤–∞–Ω–Ω—è–º.
        ctx.clearRect(0, 0, width, height);
        // –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î, –Ω—ñ—á–æ–≥–æ –Ω–µ –º–∞–ª—é—î–º–æ.
        if (state.prices.length === 0) return;

        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –ø–æ –æ—Å—ñ Y –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
        const minRTP = Math.min(...state.prices);
        const maxRTP = Math.max(...state.prices);
        const padding = (maxRTP - minRTP) * 0.1;
        const yMinDynamic = Math.max(0, minRTP - padding);
        const yMaxDynamic = Math.min(100, maxRTP + padding);
        const yRange = (yMaxDynamic - yMinDynamic) || 1;

        // –ú–∞–ª—é–≤–∞–Ω–Ω—è —Ñ–æ–Ω–æ–≤–æ—ó —Å—ñ—Ç–∫–∏ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ñ —Ç–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ñ –ª—ñ–Ω—ñ—ó).
        ctx.strokeStyle = 'rgba(0, 255, 247, 0.2)';
        ctx.lineWidth = 0.5;
        const gridXStep = width / 10;
        const gridYStep = height / 5;
        for (let i = 1; i < 10; i++) {
            ctx.beginPath();
            ctx.moveTo(i * gridXStep, 0);
            ctx.lineTo(i * gridXStep, height);
            ctx.stroke();
        }
        for (let i = 1; i < 5; i++) {
            ctx.beginPath();
            ctx.moveTo(0, i * gridYStep);
            ctx.lineTo(width, i * gridYStep);
            ctx.stroke();
        }

        // –ú–∞–ª—é–≤–∞–Ω–Ω—è –æ—Å–µ–π.
        ctx.strokeStyle = '#959595ff';
        ctx.lineWidth = 1.5;
        ctx.beginPath();
        ctx.moveTo(5, 0);
        ctx.lineTo(5, height);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(0, height - 5);
        ctx.lineTo(width, height - 5);
        ctx.stroke();

        // –ú–∞–ª—é–≤–∞–Ω–Ω—è –º—ñ—Ç–æ–∫ –Ω–∞ –æ—Å—è—Ö.
        ctx.fillStyle = '#00ffffff';
        ctx.font = `10px sans-serif`;
        ctx.textAlign = 'left';
        const yLabels = [yMinDynamic, yMinDynamic + yRange * 0.25, yMinDynamic + yRange * 0.5, yMinDynamic + yRange * 0.75, yMaxDynamic];
        yLabels.forEach((label, index) => {
            const y = height - ((label - yMinDynamic) / yRange) * height;
            ctx.fillText(label.toFixed(0), 10, y);
        });

        // –ú–∞–ª—é–≤–∞–Ω–Ω—è –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω–æ—ó –æ–±–ª–∞—Å—Ç—ñ –ø—ñ–¥ –ª—ñ–Ω—ñ—î—é –≥—Ä–∞—Ñ—ñ–∫–∞.
        const xStep = width / (state.maxPoints - 1);
        const gradient = ctx.createLinearGradient(0, 0, 0, height);
        let topShadowColor = (state.prices[state.prices.length - 1] >= 50) ? 'rgba(0, 255, 183, 0.78)' : 'rgba(255, 0, 0, 0.75)';
        gradient.addColorStop(0, topShadowColor);
        gradient.addColorStop(1, 'rgba(28, 28, 28, 0)');
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.moveTo(0, height);
        for (let i = 0; i < state.prices.length; i++) {
            const x = i * xStep;
            const y = height - ((state.prices[i] - yMinDynamic) / yRange) * height;
            ctx.lineTo(x, y);
        }
        ctx.lineTo(width, height);
        ctx.closePath();
        ctx.fill();

        // –ú–∞–ª—é–≤–∞–Ω–Ω—è –ª—ñ–Ω—ñ—ó –≥—Ä–∞—Ñ—ñ–∫–∞ –∑ —Ç—ñ–Ω—è–º–∏.
        ctx.lineWidth = 1.5;
        ctx.shadowBlur = 100;
        for (let i = 0; i < state.prices.length - 1; i++) {
            const x1 = i * xStep;
            const y1 = height - ((state.prices[i] - yMinDynamic) / yRange) * height;
            const x2 = (i + 1) * xStep;
            const y2 = height - ((state.prices[i + 1] - yMinDynamic) / yRange) * height;
            let lineColor = (state.prices[i + 1] >= 50) ? '#00ffe5ff' : '#b90000ff';
            ctx.strokeStyle = lineColor;
            ctx.shadowColor = lineColor;
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.stroke();
        }
        ctx.shadowBlur = 0;

        // –ú–∞–ª—é–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ç–æ—á–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ—ñ–∫—É.
        const lastX = (state.prices.length - 1) * xStep;
        const lastY = height - ((state.prices[state.prices.length - 1] - yMinDynamic) / yRange) * height;
        ctx.fillStyle = '#ffffff';
        ctx.beginPath();
        ctx.arc(lastX, lastY, 3, 0, 2 * Math.PI);
        ctx.fill();

        // –ú–∞–ª—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –ø–æ—Ç–æ—á–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –Ω–∞–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ—é —Ç–æ—á–∫–æ—é.
        const currentRTP = state.prices[state.prices.length - 1];
        ctx.fillStyle = '#ffffff';
        ctx.font = `bold 13px sans-serif`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'bottom';
        let textX = lastX;
        let textY = lastY - 8;
        if (textX < 20) textX = 20;
        if (textX > width - 20) textX = width - 20;
        if (textY < 20) textY = 20;
        ctx.fillText(`${currentRTP.toFixed(1)}%`, textX, textY);
    }

    function formatCurrency(amount) {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0
        }).format(amount);
    }

    function updateData() {
        const now = Date.now();
        const currentPhase = scenario[state.scenarioIndex];
        const elapsedTime = (now - state.phaseStartTime) / 1000;
        if (elapsedTime >= currentPhase.duration) {
            transitionToNextPhase();
        }

        const lastPrice = state.prices.length > 0 ? state.prices[state.prices.length - 1] : 50;
        let minRTP, maxRTP;
        if (currentPhase.color === '#00c107') {
            minRTP = 50;
            maxRTP = currentPhase.maxRTP;
        } else {
            minRTP = currentPhase.minRTP;
            maxRTP = 49.99;
        }
        const range = maxRTP - minRTP;
        const volatilityFactor = Math.random() * (range / 2) - (range / 4);
        const newPrice = lastPrice + volatilityFactor;
        const clampedPrice = Math.max(minRTP, Math.min(maxRTP, newPrice));
        state.prices.push(clampedPrice);
        if (state.prices.length > state.maxPoints) {
            state.prices.shift();
        }

        if (currentPhase.color === '#00c107') {
            const isBonus = Math.random() < 0.15;
            if (isBonus) {
                state.longestStreakValue = 5;
                state.bonusProbabilityValue = 5.0;
                state.lastBigWinTime = formatCurrency(Math.floor(Math.random() * 8000) + 1000);
            } else {
                state.longestStreakValue = Math.floor(Math.random() * (15 - 5 + 1)) + 5;
                state.bonusProbabilityValue = Math.min(100, state.bonusProbabilityValue + 0.5);
            }
        } else {
            const isBonus = Math.random() < 0.02;
            if (isBonus) {
                state.longestStreakValue = 5;
                state.bonusProbabilityValue = 5.0;
                state.lastBigWinTime = formatCurrency(Math.floor(Math.random() * 300) + 50);
            } else {
                state.longestStreakValue = Math.floor(Math.random() * (50 - 25 + 1)) + 25;
                state.bonusProbabilityValue = Math.min(100, state.bonusProbabilityValue + 0.5);
            }
        }

        state.activePlayersValue = Math.floor(Math.random() * 2000) + 1000;

        const oneHour = 3600000;
        if (now - state.lastJackpotUpdate >= oneHour) {
            const jackpotAmount = Math.floor(Math.random() * (200000 - 50000 + 1)) + 50000;
            state.lastJackpotTime = formatCurrency(jackpotAmount);
            state.lastJackpotUpdate = now;
        }

        const currentRTP = state.prices[state.prices.length - 1];
        const totalRTP = state.prices.reduce((sum, price) => sum + price, 0);
        const averageRTP = totalRTP / state.prices.length;
        const rtpRange = Math.max(...state.prices) - Math.min(...state.prices);

        let volatilityText;
        if (rtpRange > 50) {
            volatilityText = '–ö—Ä–∏—Ç–∏—á–Ω–∞';
        } else if (rtpRange > 25) {
            volatilityText = '–í–∏—Å–æ–∫–∞';
        } else if (rtpRange > 10) {
            volatilityText = '–°–µ—Ä–µ–¥–Ω—è';
        } else {
            volatilityText = '–ù–∏–∑—å–∫–∞';
        }

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        currentRTPElement.textContent = `${currentRTP.toFixed(2)}%`;
        averageRTPElement.textContent = `${averageRTP.toFixed(2)}%`;
        volatilityElement.textContent = volatilityText;

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞, —è–∫—â–æ –≤–æ–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–µ
        if (!modal.classList.contains('hidden')) {
            updateModalData();
        }

        localStorage.setItem('analyzerState', JSON.stringify(state));
        drawChart();
    }

    function updateModalData() {
        const currentRTP = state.prices[state.prices.length - 1];
        const totalRTP = state.prices.reduce((sum, price) => sum + price, 0);
        const averageRTP = totalRTP / state.prices.length;
        const rtpRange = Math.max(...state.prices) - Math.min(...state.prices);

        let volatilityText;
        if (rtpRange > 50) {
            volatilityText = '–ö—Ä–∏—Ç–∏—á–Ω–∞';
        } else if (rtpRange > 25) {
            volatilityText = '–í–∏—Å–æ–∫–∞';
        } else if (rtpRange > 10) {
            volatilityText = '–°–µ—Ä–µ–¥–Ω—è';
        } else {
            volatilityText = '–ù–∏–∑—å–∫–∞';
        }

        modalCurrentRTPElement.textContent = `${currentRTP.toFixed(2)}%`;
        modalAverageRTPElement.textContent = `${averageRTP.toFixed(2)}%`;
        modalVolatilityElement.textContent = volatilityText;
        lastBigWinElement.textContent = state.lastBigWinTime;
        booksFrequencyElement.textContent = `${(Math.random() * (25 - 5) + 5).toFixed(1)}%`; // –û–Ω–æ–≤–ª–µ–Ω–æ –¥—ñ–∞–ø–∞–∑–æ–Ω
        longestStreakElement.textContent = state.longestStreakValue;
        bonusProbabilityElement.textContent = `${state.bonusProbabilityValue.toFixed(1)}%`;
        activePlayersElement.textContent = state.activePlayersValue;
        lastJackpotTimeElement.textContent = state.lastJackpotTime;
    }

    setInterval(updateData, 5000);
    updateData();

});
